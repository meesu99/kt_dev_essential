> 프레임워크
  - 개발을 도와주는 구조와 규칙의 집합
  - 웹: Spring, 게임: Unity
  * 라이브러리: 개발자가 직접 호출
  * 프레임워크: 프레임워크가 개발자 코드 호출


> Spring Framework
  - 자바 기반의 기업용 웹 애플리케이션을 쉽게 만들기 위한 프레임워크
  - IoC: 객체 생성과 제어를 Spring이 담당 (제어의 역전)
  - DI: 객체 간의 연결(의존성)을 외부에서 주입 (의존성 주입)
  - AOP: 공통 기능(로깅, 보안 등)을 비즈니스 로직과 분리 (관점 지향 프로그래밍)
  - MVC: 애플리케이션의 역할을 구조화하여 분리 (모델-뷰-컨트롤러 패턴)

 > XML
  - 데이터를 구조화하여 저장하고 전송하기 위해 설계.

  1) 태그 규칙
    - 모든 태그는 열고 닫아야 함: `<tag>내용</tag>`
    - 빈 태그는 자체 닫기 가능: `<tag/>`
    - 태그명은 대소문자 구분
    - 숫자로 시작할 수 없음

  2) 속성 규칙
    - 속성값은 반드시 따옴표로 감싸야 함
    - 하나의 요소에서 같은 속성명 중복 불가

  - 요소로 표현 : 주요 데이터, 여러 값을 가질 수 있는 정보
  - 속성으로 표현 : 메타데이터, ID, 단순한 설정값



> Spirng IoC (제어의 역전)
  - 객체 생성과 제어를 개발자가 아닌 프레임워크(Spring)가 담당
  - 개발자는 객체를 요청만 하면 되고, 생성과 주입은 Spring이 처리


> Spring DI (의존성 주입)
  - 객체가 직접 의존 객체를 만들지 않고, Spring이 외부에서 넣어주는 방식


> Spring AOP (관점 지향 프로그래밍)
  - 핵심 비즈니스 로직과 부가 기능(로깅, 보안 등)을 분리해서, 코드 중복을 없애고 관리를 쉽게 만든느 기술
  - 코드가 깔끔, 유지보수 용이, 핵심 로직에만 집중

  1) Aspect (관점)
    - 공통 기능을 모아둔 모듈
    - 예: 로깅, 보안, 트랜잭션, 성능 측정
  2) JoinPoint (연결점)
    - Aspect가 끼어들 수 있는 지점
    - 예: 메서드 실행 전, 후, 예외 발생 시
  3) Pointcut (절입점)
    - 실제로 Aspect를 적용할 JoinPoint
    - 예: @annotation(LogPerformance) - 이 어노테이션 붙은 메서드만
  4) Advice (조언)
    - 실제로 끼워넣을 기능
    - 예: @Before, @After, @Around


> Spring MVC (Model - View - Controller)
  - 사용자 인터페이스와 비즈니스 로직을 분리
  - Model : 데이터와 비즈니스 로직 담당 (예: DB, 서비스 계층)
  - View : 사용자에게 보여지는 화면 (예: HTML, JSP 등)
  - Controller : 사용자 요청을 받고, Model과 View 사이를 연결

  - @Controller : 컨트롤러 클래스 정의
  - @GetMapping, @PostMapping : URL 요청 처리
  - @RequestParam, @PathVariable : 파라미터 전달
  - @ModelAttribute : 폼 데이터 바인딩
  - @ResponseBody : View 없이 JSON 등의 응답


+ pom.xml 오류 해결
 - Spring 관련 dependancy 추가
 - JDK Build 버전 수정 (1.7 -> 17)

> Java Config 방식
  - @Configuration (이 클래스가 Spring 설정 클래스임을 명시
  - @Bean (아래의 메서드를 Bean으로 등록)

